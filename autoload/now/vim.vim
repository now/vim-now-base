" Vim library file
" Maintainer:       Nikolai Weibull <now@bitwi.se>
" Latest Revision:  2007-09-16

let s:cpo_save = &cpo
set cpo&vim

" Turn the error-number NUMBER into a pattern that can be used in a :catch
" expression to match that error when generated by Vim.
function now#vim#error(number)
  return '^Vim\%((\a\+)\)\=:E' . a:number
endfunction

let now#vim#undefined_variable_error = now#vim#error(121)

" Find a variable VARIABLE_NAME in the buffer-local namespace or in the global
" namespace.  An optional default value can also be provided, which itself
" defaults to the empty string.
function now#vim#b_or_g(variable_name, ...)
  try
    return eval('b:' . a:variable_name)
  catch '^Vim\%((\a\+)\)\=:E121'
"  catch now#vim#undefined_variable_error
    try
      return eval('g:' . a:variable_name)
    catch '^Vim\%((\a\+)\)\=:E121'
"    catch now#vim#undefined_variable_error
      return (a:0 > 0) ? a:1 : ""
    endtry
  endtry
endfunction

" Apply the settings saved in the hash SETTINGS, where the keys are the names
" of the settings and the values are the values of the settings.
function now#vim#apply_settings(settings)
  for key in keys(a:settings)
    execute 'let' ('&' . key) '=' a:settings[key]
  endfor
endfunction

" Store the values of each setting in the list SETTINGS in a hash, where the
" keys are the name of the settings and the values are the values of the
" settings.
function now#vim#save_settings(settings)
  let saved = {}
  for setting in a:settings
    execute 'let saved[setting] =' ('&' . setting)
  endfor
  return saved
endfunction

" Execute EXPRESSION after temporarily applying the settings provided in
" SETTINGS, restoring them to their previous values after execution.
function now#vim#execute_with_settings(expression, settings)
  let saved_settings = now#vim#save_settings(keys(a:settings))
  call now#vim#apply_settings(a:settings)
  try
    execute expression
  finally
    call now#vim#apply_settings(saved_settings)
  end
endfunction

function now#vim#is_a(value, type)
  return type(a:value) == g:now#vim#types[a:type]
endfunction

" A hash of Vimâ€™s built-in types.
let now#vim#types = {
      \ 'number': type(0),
      \ 'string': type(""),
      \ 'funcref': type(function('tr')),
      \ 'list': type([]),
      \ 'dictionary': type({})
      \ }

let &cpo = s:cpo_save
